/*
 * CnetCard.cpp
 *
 *  Created on: Jun 12, 2014
 *      Author: Victor Liu
 */

#include "CnetCard.h"

CnetCard::CnetCard(){

	bzero(&m_nGateway,sizeof(m_nGateway));
    this->m_bUp=false;
    this->m_nInterfaceIndex=-2;
    bzero(this->m_sMac,6);
    pthread_mutex_init(&this->m_lock, NULL);

}
void CnetCard::setDevName(const char *p_sName){
	// TODO Auto-generated constructor stub

	pthread_mutex_lock(&m_lock);


	this->m_sDevName=p_sName;
	m_pHandle=NULL;
	_helper_GetAdapterMac(m_sDevName.c_str(),&m_sMac[0]);
	this->m_sMacString=_helper_Mac_buff2Str(&m_sMac[0]);
	pthread_mutex_unlock(&m_lock);


}

CnetCard::~CnetCard() {
	// TODO Auto-generated destructor stub
}


void CnetCard::setIPaddress(pcap_addr * p_pAdd)
{

	pthread_mutex_lock(&m_lock);

	m_IPs.clear();
    pcap_addr * add=p_pAdd;
    while(add) //Get IP Address of the adapter
    {

      if (add->addr->sa_family == AF_INET) {

          //TRACE("family %d\n",add->addr->sa_family);

          //TRACE("\t\taddress: <%s>\n", inet_ntoa(((struct sockaddr_in*)add->addr)->sin_addr));
          m_IPs.push_back(((struct sockaddr_in*)add->addr)->sin_addr);
      }

      add=add->next;
    }
    pthread_mutex_unlock(&m_lock);

}

void CnetCard::setIndexStat(const int &p_nIndex,const bool & p_bisUp)
{
  pthread_mutex_lock(&m_lock);

  this->m_nInterfaceIndex=p_nIndex;
  this->m_bUp=p_bisUp;

  pthread_mutex_unlock(&m_lock);
}
void CnetCard::setGateWay(in_addr & p_nGateWay)
{
   pthread_mutex_lock(&m_lock);
   memcpy(&this->m_nGateway,&p_nGateWay,sizeof(p_nGateWay));
   pthread_mutex_unlock(&m_lock);
}


void CnetCard::showDetails()
{

	   pthread_mutex_lock(&m_lock);

	TRACE("Name %s\n",this->m_sDevName.c_str());
	TRACE("Mac %s\n",this->m_sMacString.c_str());
	TRACE("%s",_helper_string_format("Name %s Mac %s up: %s index: %d, gateway %s",this->m_sDevName.c_str(),m_sMacString.c_str(),this->m_bUp?"up":"Down",this->m_nInterfaceIndex,inet_ntoa(this->m_nGateway)).c_str());

	for (std::list<in_addr>::iterator it=m_IPs.begin(); it != m_IPs.end(); ++it)
	{
	    	TRACE("IP addresses%s",inet_ntoa(*it));
	}

	pthread_mutex_unlock(&m_lock);


}
